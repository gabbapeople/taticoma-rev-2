// Generated by gencpp from file taticoma_msgs/StormCommand.msg
// DO NOT EDIT!

#ifndef TATICOMA_MSGS_MESSAGE_STORMCOMMAND_H
#define TATICOMA_MSGS_MESSAGE_STORMCOMMAND_H

#include <map>
#include <string>
#include <vector>

#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>
#include <ros/serialization.h>
#include <ros/types.h>

namespace taticoma_msgs {
template <class ContainerAllocator>
struct StormCommand_ {
    typedef StormCommand_<ContainerAllocator> Type;

    StormCommand_()
        : roll(0.0)
        , pitch(0.0)
        , yaw(0.0) {
    }
    StormCommand_(const ContainerAllocator& _alloc)
        : roll(0.0)
        , pitch(0.0)
        , yaw(0.0) {
        (void)_alloc;
    }

    typedef double _roll_type;
    _roll_type roll;

    typedef double _pitch_type;
    _pitch_type pitch;

    typedef double _yaw_type;
    _yaw_type yaw;

    typedef boost::shared_ptr<::taticoma_msgs::StormCommand_<ContainerAllocator>> Ptr;
    typedef boost::shared_ptr<::taticoma_msgs::StormCommand_<ContainerAllocator> const> ConstPtr;

}; // struct StormCommand_

typedef ::taticoma_msgs::StormCommand_<std::allocator<void>> StormCommand;

typedef boost::shared_ptr<::taticoma_msgs::StormCommand> StormCommandPtr;
typedef boost::shared_ptr<::taticoma_msgs::StormCommand const> StormCommandConstPtr;

// constants requiring out of line definition

template <typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::taticoma_msgs::StormCommand_<ContainerAllocator>& v) {
    ros::message_operations::Printer<::taticoma_msgs::StormCommand_<ContainerAllocator>>::stream(s, "", v);
    return s;
}

} // namespace taticoma_msgs

namespace ros {
namespace message_traits {

    // BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
    // {'taticoma_msgs': ['/home/ubuntu/taticoma-rev-2/ROS/src/taticoma_msgs/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

    // !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']

    template <class ContainerAllocator>
    struct IsFixedSize<::taticoma_msgs::StormCommand_<ContainerAllocator>>
        : TrueType {};

    template <class ContainerAllocator>
    struct IsFixedSize<::taticoma_msgs::StormCommand_<ContainerAllocator> const>
        : TrueType {};

    template <class ContainerAllocator>
    struct IsMessage<::taticoma_msgs::StormCommand_<ContainerAllocator>>
        : TrueType {};

    template <class ContainerAllocator>
    struct IsMessage<::taticoma_msgs::StormCommand_<ContainerAllocator> const>
        : TrueType {};

    template <class ContainerAllocator>
    struct HasHeader<::taticoma_msgs::StormCommand_<ContainerAllocator>>
        : FalseType {};

    template <class ContainerAllocator>
    struct HasHeader<::taticoma_msgs::StormCommand_<ContainerAllocator> const>
        : FalseType {};

    template <class ContainerAllocator>
    struct MD5Sum<::taticoma_msgs::StormCommand_<ContainerAllocator>> {
        static const char* value() {
            return "eeec8b25a660789a89540dedcb2b06d6";
        }

        static const char* value(const ::taticoma_msgs::StormCommand_<ContainerAllocator>&) { return value(); }
        static const uint64_t static_value1 = 0xeeec8b25a660789aULL;
        static const uint64_t static_value2 = 0x89540dedcb2b06d6ULL;
    };

    template <class ContainerAllocator>
    struct DataType<::taticoma_msgs::StormCommand_<ContainerAllocator>> {
        static const char* value() {
            return "taticoma_msgs/StormCommand";
        }

        static const char* value(const ::taticoma_msgs::StormCommand_<ContainerAllocator>&) { return value(); }
    };

    template <class ContainerAllocator>
    struct Definition<::taticoma_msgs::StormCommand_<ContainerAllocator>> {
        static const char* value() {
            return "\n"
                   "float64 roll\n"
                   "float64 pitch\n"
                   "float64 yaw\n";
        }

        static const char* value(const ::taticoma_msgs::StormCommand_<ContainerAllocator>&) { return value(); }
    };

} // namespace message_traits
} // namespace ros

namespace ros {
namespace serialization {

    template <class ContainerAllocator>
    struct Serializer<::taticoma_msgs::StormCommand_<ContainerAllocator>> {
        template <typename Stream, typename T>
        inline static void allInOne(Stream& stream, T m) {
            stream.next(m.roll);
            stream.next(m.pitch);
            stream.next(m.yaw);
        }

        ROS_DECLARE_ALLINONE_SERIALIZER
    }; // struct StormCommand_

} // namespace serialization
} // namespace ros

namespace ros {
namespace message_operations {

    template <class ContainerAllocator>
    struct Printer<::taticoma_msgs::StormCommand_<ContainerAllocator>> {
        template <typename Stream>
        static void stream(Stream& s, const std::string& indent, const ::taticoma_msgs::StormCommand_<ContainerAllocator>& v) {
            s << indent << "roll: ";
            Printer<double>::stream(s, indent + "  ", v.roll);
            s << indent << "pitch: ";
            Printer<double>::stream(s, indent + "  ", v.pitch);
            s << indent << "yaw: ";
            Printer<double>::stream(s, indent + "  ", v.yaw);
        }
    };

} // namespace message_operations
} // namespace ros

#endif // TATICOMA_MSGS_MESSAGE_STORMCOMMAND_H
