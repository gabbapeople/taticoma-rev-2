// Generated by gencpp from file taticoma_msgs/TeleopCommand.msg
// DO NOT EDIT!


#ifndef TATICOMA_MSGS_MESSAGE_TELEOPCOMMAND_H
#define TATICOMA_MSGS_MESSAGE_TELEOPCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace taticoma_msgs
{
template <class ContainerAllocator>
struct TeleopCommand_
{
  typedef TeleopCommand_<ContainerAllocator> Type;

  TeleopCommand_()
    : axes()
    , a_buttons()
    , p_buttons()
    , buttons()
    , mode(0)
    , gait_mode(0)  {
      axes.assign(0.0);

      a_buttons.assign(0.0);

      p_buttons.assign(0);

      buttons.assign(0);
  }
  TeleopCommand_(const ContainerAllocator& _alloc)
    : axes()
    , a_buttons()
    , p_buttons()
    , buttons()
    , mode(0)
    , gait_mode(0)  {
  (void)_alloc;
      axes.assign(0.0);

      a_buttons.assign(0.0);

      p_buttons.assign(0);

      buttons.assign(0);
  }



   typedef boost::array<float, 4>  _axes_type;
  _axes_type axes;

   typedef boost::array<float, 2>  _a_buttons_type;
  _a_buttons_type a_buttons;

   typedef boost::array<uint8_t, 2>  _p_buttons_type;
  _p_buttons_type p_buttons;

   typedef boost::array<uint8_t, 2>  _buttons_type;
  _buttons_type buttons;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef uint8_t _gait_mode_type;
  _gait_mode_type gait_mode;





  typedef boost::shared_ptr< ::taticoma_msgs::TeleopCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::taticoma_msgs::TeleopCommand_<ContainerAllocator> const> ConstPtr;

}; // struct TeleopCommand_

typedef ::taticoma_msgs::TeleopCommand_<std::allocator<void> > TeleopCommand;

typedef boost::shared_ptr< ::taticoma_msgs::TeleopCommand > TeleopCommandPtr;
typedef boost::shared_ptr< ::taticoma_msgs::TeleopCommand const> TeleopCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::taticoma_msgs::TeleopCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::taticoma_msgs::TeleopCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace taticoma_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'taticoma_msgs': ['/home/ubuntu/taticoma-rev-2/ROS/src/taticoma_msgs/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::taticoma_msgs::TeleopCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::taticoma_msgs::TeleopCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::taticoma_msgs::TeleopCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::taticoma_msgs::TeleopCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::taticoma_msgs::TeleopCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::taticoma_msgs::TeleopCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::taticoma_msgs::TeleopCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "175d84f8f67bfd93cb04e6fb561123b6";
  }

  static const char* value(const ::taticoma_msgs::TeleopCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x175d84f8f67bfd93ULL;
  static const uint64_t static_value2 = 0xcb04e6fb561123b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::taticoma_msgs::TeleopCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "taticoma_msgs/TeleopCommand";
  }

  static const char* value(const ::taticoma_msgs::TeleopCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::taticoma_msgs::TeleopCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"float32[4] axes\n"
"float32[2] a_buttons\n"
"uint8[2] p_buttons\n"
"uint8[2] buttons\n"
"\n"
"uint8 mode\n"
"uint8 gait_mode\n"
"\n"
;
  }

  static const char* value(const ::taticoma_msgs::TeleopCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::taticoma_msgs::TeleopCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.axes);
      stream.next(m.a_buttons);
      stream.next(m.p_buttons);
      stream.next(m.buttons);
      stream.next(m.mode);
      stream.next(m.gait_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TeleopCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::taticoma_msgs::TeleopCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::taticoma_msgs::TeleopCommand_<ContainerAllocator>& v)
  {
    s << indent << "axes[]" << std::endl;
    for (size_t i = 0; i < v.axes.size(); ++i)
    {
      s << indent << "  axes[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.axes[i]);
    }
    s << indent << "a_buttons[]" << std::endl;
    for (size_t i = 0; i < v.a_buttons.size(); ++i)
    {
      s << indent << "  a_buttons[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.a_buttons[i]);
    }
    s << indent << "p_buttons[]" << std::endl;
    for (size_t i = 0; i < v.p_buttons.size(); ++i)
    {
      s << indent << "  p_buttons[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.p_buttons[i]);
    }
    s << indent << "buttons[]" << std::endl;
    for (size_t i = 0; i < v.buttons.size(); ++i)
    {
      s << indent << "  buttons[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.buttons[i]);
    }
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "gait_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gait_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TATICOMA_MSGS_MESSAGE_TELEOPCOMMAND_H
